layer exercise is
  class System is
     active_customer : reference Customer;
     active_shopkeeper : reference Shopkeeper;
     active_admin : reference Admin;
  end System;
  
  class Bookstore is
    owner: reference Shopkeeper;
	created: (yes, no);
  end Bookstore;
  
  class Basket is
	book_1 : reference Book;
	book_2 : reference Book;
	book_3 : reference Book;
	next_empty : (first, second, third, full);
  end Basket;
  
  class Book is
	owned_bookstore : reference Bookstore;
	owned_customer : reference Customer;
	in_basket : reference Basket;
	name : (OfficerWithAGoal, EnemyWithVigor, GirlsOfThePrison, GuardiansOfHell, AliensAndBandits, AchievementOfDespair, BorderWithHonor);
  end Book;
  
  -- User types
  class Customer is
	browsing_currently : reference Book;
	owns_basket : reference Basket;
  end Customer;
  
  class Shopkeeper is
	registed : (no, yes);
  end Shopkeeper;
  
  class Admin is
  end Admin;
  
  -- Actions for bying and selling the book
  action insert_book_to_basket(book : Book; basket : Basket; customer : Customer; system: System) is
    when book.in_basket = null and book.owned_customer = null and system.active_customer = customer and customer.browsing_currently = book do
	   if basket.next_empty'third then 
	    basket.book_3:=book || basket.next_empty->full();
	   end if
	   ||if basket.next_empty'second then 
	    basket.book_2:=book || basket.next_empty->third();
	   end if
	   ||if basket.next_empty'first then 
	    basket.book_1:=book || basket.next_empty->second();
	   end if
	   ||book.in_basket := basket;
  end;
   -- When customer decides to removed book from basket
  action customer_remove_book_from_basket(book : Book; basket : Basket; bookstore : Bookstore; customer: Customer) is 
	when book.owned_bookstore = bookstore and basket.book_1 = book or basket.book_2 = book or basket.book_3 = book do
	   if basket.book_1 = book then 
	    basket.book_1:=null;
	   end if
	   ||if basket.book_2 = book then 
	    basket.book_2:=null;
	   end if
	   ||if basket.book_3 = book then 
	    basket.book_3:=null;
	   end if;
  end;
	--  when timeout occures or customer buys the basket or shopkeeper removes book from store   (this works automatically in system)
    action automatic_remove_book_from_basket(book : Book; basket : Basket; bookstore : Bookstore) is 
	when book.owned_bookstore = bookstore and basket.book_1 = book or basket.book_2 = book or basket.book_3 = book do
	   if basket.book_1 = book then 
	    basket.book_1:=null;
	   end if
	   ||if basket.book_2 = book then 
	    basket.book_2:=null;
	   end if
	   ||if basket.book_3 = book then 
	    basket.book_3:=null;
	   end if;
    end;
  
  action buy_book_from_basket(book : Book; customer: Customer; basket : Basket) is 
	when basket.book_1 = book or basket.book_2 = book or basket.book_3 = book do
	   if basket.book_1 = book then 
	       book.owned_bookstore := null
		   ||book.in_basket := null
           ||book.owned_customer := customer
           ||basket.book_1 := null;
	   end if
	   ||if basket.book_2 = book then 
	       book.owned_bookstore := null
		   ||book.in_basket := null
           ||book.owned_customer := customer
           ||basket.book_2 := null;

	   end if
	   ||if basket.book_3 = book then 
	      book.owned_bookstore := null
		   ||book.in_basket := null
           ||book.owned_customer := customer
           ||basket.book_2 := null;
	   end if
	   ||basket.next_empty->first();
  end;
		
  action browse_book(customer : Customer; book : Book; bookstore : Bookstore) is
    when book.owned_bookstore = bookstore and book.in_basket = null do
       customer.browsing_currently := book;
  end;
  
  -- Actions for adding and removing books from bookstore
  action add_book_to_store(shopkeeper : Shopkeeper; book : Book; bookstore : Bookstore; system: System) is
    when book.in_basket = null and book.owned_customer = null and book.owned_bookstore = null and system.active_shopkeeper = shopkeeper do
	   book.owned_bookstore := bookstore;
  end;
  action remove_book_to_store(shopkeeper : Shopkeeper; book : Book; bookstore : Bookstore; system: System) is
    when book.owned_customer = null and book.owned_bookstore = bookstore and system.active_shopkeeper = shopkeeper do
	   book.owned_bookstore := null;
  end;
  
  
   --** AUTHENTICATION actions
  
  
  -- Login actions 
  action login_customer(customer : Customer; system : System) is
    when system.active_customer = null and system.active_shopkeeper = null and system.active_admin = null do
	   system.active_customer := customer;
  end;
  action login_shopkeeper(shopkeeper : Shopkeeper; system : System) is
    when system.active_customer = null and system.active_shopkeeper = null and system.active_admin = null do
	   system.active_shopkeeper := shopkeeper;
  end;
  action login_admin(admin : Admin; system : System) is
    when system.active_customer = null and system.active_shopkeeper = null and system.active_admin = null do
	   system.active_admin := admin;
  end;
  
  -- logout actions
  action logout_customer(customer : Customer; system : System) is
    when system.active_customer = customer do
	   system.active_customer := null
	   ||customer.browsing_currently := null;
  end;
  action logout_shopkeeper(shopkeeper : Shopkeeper; system : System) is
    when system.active_shopkeeper = shopkeeper do
	   system.active_shopkeeper := null;
  end;
  action logout_admin(admin : Admin; system : System) is
    when  system.active_admin = admin do
	   system.active_admin := null;
  end;
  action admin_register_shopkeeper(system: System; admin: Admin; shopkeeper: Shopkeeper; bookstore: Bookstore) is
    when system.active_admin = admin and shopkeeper.registed'no do
	   shopkeeper.registed->yes()
	   ||bookstore.owner := shopkeeper;
  end;
  
  action admin_add_new_bookstore(system: System; admin: Admin; bookstore: Bookstore) is 
      when system.active_admin = admin and bookstore.created'no do
	     bookstore.created->yes();
  end;
  
  action admin_delete_shopkeeper(system: System ;admin: Admin; shopkeeper: Shopkeeper; bookstore: Bookstore) is
	when system.active_admin = admin and bookstore.owner = shopkeeper do
	    bookstore.created->no()
		||shopkeeper.registed->no();
  end;
  action admin_add_shopkeeper_to_bookstore(system: System; admin: Admin; shopkeeper: Shopkeeper; bookstore: Bookstore) is
    when system.active_admin = admin and bookstore.created'no and shopkeeper.registed'no do
	     bookstore.created->yes()
		 ||shopkeeper.registed->yes()
		 ||bookstore.owner := shopkeeper;
  end;
  action search(system: System; book: Book; bookstore: Bookstore; customer: Customer) is
	when book.owned_bookstore = bookstore and book.in_basket = null do
       customer.browsing_currently := book;
  end;
end exercise;
